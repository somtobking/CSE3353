<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><element><id>UMLClass</id><coordinates><x>440</x><y>156</y><w>210</w><h>90</h></coordinates><panel_attributes>&lt;&lt;interface&gt;&gt;
Algorithm
--
-execute(): virtual void
_-printAlgo(): virtual void
-path: vector&lt;int&gt;</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>76</y><w>210</w><h>60</h></coordinates><panel_attributes>Algorithm Factory
AlgorithmFact
--
-typeOfAlgo(int choice): Algorithm* </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>890</x><y>686</y><w>110</w><h>90</h></coordinates><panel_attributes>&lt;&lt;enumeration&gt;&gt;
SelectGa
--
Scaling
Elitist
Roulette

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>20</x><y>306</y><w>300</w><h>190</h></coordinates><panel_attributes>TspTabu
--
-tabu_list: vector&lt;Solution&gt; 
-getShortestPath(): Solution 
-getNearestNode(Solution bestSoln, Map &amp;m): Solution
-exists(Solution s): bool
-setTabuListSize(int num): void
-listSize = 10: int
-numOfPerm = 1000: int
--
+path: vector&lt;int&gt; 
+execute(Map &amp;m) override: void
+printAlgo() override: void
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>840</x><y>426</y><w>230</w><h>370</h></coordinates><panel_attributes>TspGa
--
-pop_size: int z
- popStart(Map &amp;m): void
-population:  vector&lt;Solution&gt; 
-mutation_rate: double
-numOfPerm: int
-maxGen: int
-parentNum[ ]: int 
-meanPath: float
-minCost(): Solution
--
+selectParents(selectGa type): void 
+mutate(Solution mut, Map &amp;m): Solution
+crossover(int p1, int p2, Map &amp;m): void
+avgPath(): double
+execute(Map &amp;m) override: double
+printAlgo() override: void</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>570</x><y>311</y><w>310</w><h>90</h></coordinates><panel_attributes>TspNaive
--
+readDataFromFile(): void
+travllingSalesmanProblem(double graph[][V], int s): void
+execute(Map &amp;m) override: void
+printAlgo() override: void</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>340</x><y>311</y><w>210</w><h>110</h></coordinates><panel_attributes>TspDp
--
+least(int c): int
+mincost(int city): void
+takeInput(): void
+execute(Map &amp;m) override: void
+printAlgo() override: void</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>500</x><y>701</y><w>130</w><h>80</h></coordinates><panel_attributes>&lt;&lt;struct&gt;&gt;
Node
--
#id: int
#coordinates[ ]: float
  

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>460</x><y>581</y><w>210</w><h>210</h></coordinates><panel_attributes>Map
--
+getVertex(): int
+readDataFile(string filename): void
+getDis(int d1, int d2): double
--
#numOfVertex =0: int
#nodes: vector&lt;Node&gt;</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>40</x><y>561</y><w>250</w><h>230</h></coordinates><panel_attributes>Solution
--
-path: vector&lt;int&gt; 
-cost: float
--
public:
+(Map &amp;m): Solution 
+inSoln(Map &amp;m): void
+computeCost(Map &amp;m): void
+getVertex(): int
+getCost(): int
+getPath(): vector&lt;int&gt; 
+setPath(vector&lt;int&gt; &amp;newPath): void
swapSoln(int i, int j, Map &amp;m): void
+isEmpty(): bool
+operator ==(const Solution&amp; rhs) const: bool</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1080</x><y>241</y><w>210</w><h>50</h></coordinates><panel_attributes>AbstractFactory
--
+main(): int</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>640</x><y>170</y><w>400</w><h>280</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;380;10;380;260</additional_attributes></element><element><id>Relation</id><coordinates><x>360</x><y>230</y><w>100</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>80;10;10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>640</x><y>220</y><w>160</w><h>110</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;140;10;140;90</additional_attributes></element><element><id>Relation</id><coordinates><x>100</x><y>190</y><w>360</w><h>130</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>340;10;10;10;10;110</additional_attributes></element><element><id>Relation</id><coordinates><x>130</x><y>130</y><w>30</w><h>190</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;10;170</additional_attributes></element><element><id>Relation</id><coordinates><x>200</x><y>80</y><w>350</w><h>100</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>330;80;330;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>200</x><y>70</y><w>640</w><h>260</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;620;10;620;240</additional_attributes></element><element><id>Relation</id><coordinates><x>0</x><y>130</y><w>930</w><h>780</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;10;760;910;760;910;670</additional_attributes></element><element><id>Relation</id><coordinates><x>200</x><y>100</y><w>220</w><h>230</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;10;200;10;200;210</additional_attributes></element><element><id>Relation</id><coordinates><x>280</x><y>649</y><w>200</w><h>30</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>180;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>310</x><y>449</y><w>220</w><h>150</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>200;130;200;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>610</x><y>459</y><w>250</w><h>140</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;120;10;10;230;10</additional_attributes></element><element><id>Relation</id><coordinates><x>210</x><y>89</y><w>1050</w><h>170</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>1030;150;1030;10;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>610</x><y>99</y><w>550</w><h>160</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>530;140;530;10;10;10;10;60</additional_attributes></element><element><id>Relation</id><coordinates><x>570</x><y>40</y><w>660</w><h>380</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;120;10;10;640;10;640;360</additional_attributes></element><element><id>Relation</id><coordinates><x>100</x><y>20</y><w>1080</w><h>400</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;50;10;10;1060;10;1060;380</additional_attributes></element><element><id>UMLClass</id><coordinates><x>1120</x><y>400</y><w>210</w><h>140</h></coordinates><panel_attributes>TspSa
--
-randProb(): double
-eval(Solution soln): double
-pr_size = 1000: int
-temp = 1000000 :     double
--
+minTour: double
+execute(Map &amp;m) override: void
+printAlgo() override: void
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1250</x><y>610</y><w>210</w><h>230</h></coordinates><panel_attributes>TspPso
--
-randProb(): double
-eval(Solution soln): double
-num_part = 100: int
-num_iterations =10:  int
max_velSize = 50: int
-alpha = 0.5: double
-beta = 0.9: double
--
+position: double
+velocity: double
+p_best double
+g_best: double
+execute(Map &amp;m) override: void
+printAlgo() override: void



    
    double randProb();
    double eval(Solution soln);

public:
    double position, velocity, p_best, g_best;
    void execute(Map &amp;m) override;
    void printAlgo() override;</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>540</x><y>0</y><w>900</w><h>620</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;150;10;10;880;10;880;600</additional_attributes></element><element><id>Relation</id><coordinates><x>180</x><y>10</y><w>1220</w><h>610</h></coordinates><panel_attributes>lt=&lt;..</panel_attributes><additional_attributes>10;60;10;10;1190;20;1200;590</additional_attributes></element></diagram>